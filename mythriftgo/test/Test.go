// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package test

import (
  "bytes"
  "context"
  "database/sql/driver"
  "errors"
  "fmt"
  "mygoproject/mythriftgo/thrift"
  "reflect"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type RequestType int64
const (
  RequestType_SAY_HELLO RequestType = 0
  RequestType_QUERY_TIME RequestType = 1
)

func (p RequestType) String() string {
  switch p {
  case RequestType_SAY_HELLO: return "SAY_HELLO"
  case RequestType_QUERY_TIME: return "QUERY_TIME"
  }
  return "<UNSET>"
}

func RequestTypeFromString(s string) (RequestType, error) {
  switch s {
  case "SAY_HELLO": return RequestType_SAY_HELLO, nil 
  case "QUERY_TIME": return RequestType_QUERY_TIME, nil 
  }
  return RequestType(0), fmt.Errorf("not a valid RequestType string")
}


func RequestTypePtr(v RequestType) *RequestType { return &v }

func (p RequestType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *RequestType) UnmarshalText(text []byte) error {
q, err := RequestTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *RequestType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = RequestType(v)
return nil
}

func (p * RequestType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - Type
//  - Name
//  - Age
type Request struct {
  Type RequestType `thrift:"type,1,required" db:"type" json:"type"`
  Name string `thrift:"name,2,required" db:"name" json:"name"`
  Age *int32 `thrift:"age,3" db:"age" json:"age,omitempty"`
}

func NewRequest() *Request {
  return &Request{}
}


func (p *Request) GetType() RequestType {
  return p.Type
}

func (p *Request) GetName() string {
  return p.Name
}
var Request_Age_DEFAULT int32
func (p *Request) GetAge() int32 {
  if !p.IsSetAge() {
    return Request_Age_DEFAULT
  }
return *p.Age
}
func (p *Request) IsSetAge() bool {
  return p.Age != nil
}

func (p *Request) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetType bool = false;
  var issetName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetType = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetName = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"));
  }
  if !issetName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"));
  }
  return nil
}

func (p *Request)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := RequestType(v)
  p.Type = temp
}
  return nil
}

func (p *Request)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *Request)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Age = &v
}
  return nil
}

func (p *Request) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Request) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *Request) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *Request) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAge() {
    if err := oprot.WriteFieldBegin("age", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:age: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Age)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.age (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:age: ", p), err) }
  }
  return err
}

func (p *Request) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Request(%+v)", *p)
}

// Attributes:
//  - Code
//  - Reason
type RequestException struct {
  Code int32 `thrift:"code,1,required" db:"code" json:"code"`
  Reason *string `thrift:"reason,2" db:"reason" json:"reason,omitempty"`
}

func NewRequestException() *RequestException {
  return &RequestException{}
}


func (p *RequestException) GetCode() int32 {
  return p.Code
}
var RequestException_Reason_DEFAULT string
func (p *RequestException) GetReason() string {
  if !p.IsSetReason() {
    return RequestException_Reason_DEFAULT
  }
return *p.Reason
}
func (p *RequestException) IsSetReason() bool {
  return p.Reason != nil
}

func (p *RequestException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetCode bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetCode = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetCode{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Code is not set"));
  }
  return nil
}

func (p *RequestException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *RequestException)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Reason = &v
}
  return nil
}

func (p *RequestException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RequestException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RequestException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *RequestException) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetReason() {
    if err := oprot.WriteFieldBegin("reason", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:reason: ", p), err) }
    if err := oprot.WriteString(string(*p.Reason)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.reason (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:reason: ", p), err) }
  }
  return err
}

func (p *RequestException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RequestException(%+v)", *p)
}

func (p *RequestException) Error() string {
  return p.String()
}

type HelloWordService interface {
  // Parameters:
  //  - Request
  DoAction(ctx context.Context, request *Request) (r string, err error)
}

type HelloWordServiceClient struct {
  c thrift.TClient
}

func NewHelloWordServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *HelloWordServiceClient {
  return &HelloWordServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewHelloWordServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *HelloWordServiceClient {
  return &HelloWordServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewHelloWordServiceClient(c thrift.TClient) *HelloWordServiceClient {
  return &HelloWordServiceClient{
    c: c,
  }
}

func (p *HelloWordServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Request
func (p *HelloWordServiceClient) DoAction(ctx context.Context, request *Request) (r string, err error) {
  var _args0 HelloWordServiceDoActionArgs
  _args0.Request = request
  var _result1 HelloWordServiceDoActionResult
  if err = p.Client_().Call(ctx, "doAction", &_args0, &_result1); err != nil {
    return
  }
  switch {
  case _result1.Qe!= nil:
    return r, _result1.Qe
  }

  return _result1.GetSuccess(), nil
}

type HelloWordServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler HelloWordService
}

func (p *HelloWordServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *HelloWordServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *HelloWordServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewHelloWordServiceProcessor(handler HelloWordService) *HelloWordServiceProcessor {

  self2 := &HelloWordServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self2.processorMap["doAction"] = &helloWordServiceProcessorDoAction{handler:handler}
return self2
}

func (p *HelloWordServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x3 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x3.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x3

}

type helloWordServiceProcessorDoAction struct {
  handler HelloWordService
}

func (p *helloWordServiceProcessorDoAction) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := HelloWordServiceDoActionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("doAction", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := HelloWordServiceDoActionResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.DoAction(ctx, args.Request); err2 != nil {
  switch v := err2.(type) {
    case *RequestException:
  result.Qe = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing doAction: " + err2.Error())
    oprot.WriteMessageBegin("doAction", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("doAction", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Request
type HelloWordServiceDoActionArgs struct {
  Request *Request `thrift:"request,1" db:"request" json:"request"`
}

func NewHelloWordServiceDoActionArgs() *HelloWordServiceDoActionArgs {
  return &HelloWordServiceDoActionArgs{}
}

var HelloWordServiceDoActionArgs_Request_DEFAULT *Request
func (p *HelloWordServiceDoActionArgs) GetRequest() *Request {
  if !p.IsSetRequest() {
    return HelloWordServiceDoActionArgs_Request_DEFAULT
  }
return p.Request
}
func (p *HelloWordServiceDoActionArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *HelloWordServiceDoActionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HelloWordServiceDoActionArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &Request{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *HelloWordServiceDoActionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("doAction_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HelloWordServiceDoActionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *HelloWordServiceDoActionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HelloWordServiceDoActionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Qe
type HelloWordServiceDoActionResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Qe *RequestException `thrift:"qe,1" db:"qe" json:"qe,omitempty"`
}

func NewHelloWordServiceDoActionResult() *HelloWordServiceDoActionResult {
  return &HelloWordServiceDoActionResult{}
}

var HelloWordServiceDoActionResult_Success_DEFAULT string
func (p *HelloWordServiceDoActionResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return HelloWordServiceDoActionResult_Success_DEFAULT
  }
return *p.Success
}
var HelloWordServiceDoActionResult_Qe_DEFAULT *RequestException
func (p *HelloWordServiceDoActionResult) GetQe() *RequestException {
  if !p.IsSetQe() {
    return HelloWordServiceDoActionResult_Qe_DEFAULT
  }
return p.Qe
}
func (p *HelloWordServiceDoActionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *HelloWordServiceDoActionResult) IsSetQe() bool {
  return p.Qe != nil
}

func (p *HelloWordServiceDoActionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HelloWordServiceDoActionResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *HelloWordServiceDoActionResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Qe = &RequestException{}
  if err := p.Qe.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Qe), err)
  }
  return nil
}

func (p *HelloWordServiceDoActionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("doAction_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HelloWordServiceDoActionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *HelloWordServiceDoActionResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetQe() {
    if err := oprot.WriteFieldBegin("qe", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:qe: ", p), err) }
    if err := p.Qe.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Qe), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:qe: ", p), err) }
  }
  return err
}

func (p *HelloWordServiceDoActionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HelloWordServiceDoActionResult(%+v)", *p)
}


